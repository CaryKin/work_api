package initialize

import (
	"gin-vue-admin/common/validate"
	_ "gin-vue-admin/docs"
	"gin-vue-admin/global"
	"gin-vue-admin/middleware"
	"gin-vue-admin/router/admin"
	"gin-vue-admin/router/product"
	"go.uber.org/zap"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
)

// 初始化总路由

func Routers() *gin.Engine {
	var Router = gin.New()
	// 定义全局中间件
	Router.Use(middleware.ZapLogger(), middleware.GinRecovery(true))
	Router.StaticFS(global.GVA_CONFIG.Local.Path, http.Dir(global.GVA_CONFIG.Local.Path)) // 为用户头像和文件提供静态地址
	// Router.Use(middleware.LoadTls())  // 打开就能玩https了
	global.GVA_LOG.Info("use middleware logger")
	// 跨域
	//Router.Use(middleware.Cors()) // 如需跨域可以打开
	global.GVA_LOG.Info("use middleware cors")
	Router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	global.GVA_LOG.Info("register swagger handler")
	// 方便统一添加路由组前缀 多服务器上线使用
	PublicGroup := Router.Group("backend")
	{
		admin.InitBaseRouter(PublicGroup) // 注册基础功能路由 不做鉴权
		admin.InitInitRouter(PublicGroup) // 自动初始化相关
	}
	PrivateGroup := Router.Group("backend")

	if err := validate.InitTrans("zh"); err != nil {
		global.GVA_LOG.Error("init trans failed", zap.Any("err", err))
	}

	PrivateGroup.Use(middleware.JWTAuth()).Use(middleware.CasbinHandler())
	{
		admin.InitApiRouter(PrivateGroup)                   // 注册功能api路由
		admin.InitJwtRouter(PrivateGroup)                   // jwt相关路由
		admin.InitUserRouter(PrivateGroup)                  // 注册用户路由
		admin.InitMenuRouter(PrivateGroup)                  // 注册menu路由
		admin.InitEmailRouter(PrivateGroup)                 // 邮件相关路由
		admin.InitSystemRouter(PrivateGroup)                // system相关路由
		admin.InitCasbinRouter(PrivateGroup)                // 权限相关路由
		admin.InitCustomerRouter(PrivateGroup)              // 客户路由
		admin.InitAutoCodeRouter(PrivateGroup)              // 创建自动化代码
		admin.InitAuthorityRouter(PrivateGroup)             // 注册角色路由
		admin.InitSimpleUploaderRouter(PrivateGroup)        // 断点续传（插件版）
		admin.InitSysDictionaryRouter(PrivateGroup)         // 字典管理
		admin.InitSysOperationRecordRouter(PrivateGroup)    // 操作记录
		admin.InitSysDictionaryDetailRouter(PrivateGroup)   // 字典详情管理
		admin.InitFileUploadAndDownloadRouter(PrivateGroup) // 文件上传下载功能路由
		admin.InitExcelRouter(PrivateGroup)                 // 表格导入导出

		// Code generated by gin-vue-admin Begin; DO NOT EDIT.
		admin.InitShopProductRouter(PrivateGroup)
		admin.InitShopProductCateRouter(PrivateGroup)
		// Code generated by gin-vue-admin End; DO NOT EDIT.
	}

	iPublicGroup := Router.Group("api")
	{
		product.InitShopProductCateRouter(iPublicGroup)
		product.InitShopProductRouter(iPublicGroup)
	}
	global.GVA_LOG.Info("router register success")
	return Router

	//Router.Group()
}
